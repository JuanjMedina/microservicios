spring.application.name=order-service

server.port=0

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQLDialect

spring.datasource.url= jdbc:mysql://localhost:3308/ms_orders
spring.datasource.username= uncledave
spring.datasource.password= Test123

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka/
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id}:${random.value}


# Keycloak Configuration
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8185/realms/microservices-realm/protocol/openid-connect/certs

# OAuth2 Client Configuration para comunicación entre servicios
spring.security.oauth2.client.registration.inventory-service.client-id=order-service
spring.security.oauth2.client.registration.inventory-service.client-secret=your-client-secret
spring.security.oauth2.client.registration.inventory-service.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.inventory-service.scope=openid,profile
spring.security.oauth2.client.provider.inventory-service.token-uri=http://localhost:8185/realms/microservices-realm/protocol/openid-connect/token
spring.security.oauth2.client.provider.inventory-service.jwk-set-uri=http://localhost:8185/realms/microservices-realm/protocol/openid-connect/certs


#Actuator Configuration
management.endpoints.web.exposure.include=health
management.endpoints.web.base-path=/actuator/orders
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

## Resilence4j - Circuit Breaker Configuration
# Habilita el registro de un HealthIndicator en Spring Boot Actuator, permitiendo exponer el estado del Circuit Breaker en /actuator/health
resilience4j.circuitbreaker.instances.order-service.register-health-indicator=true

# Define el tamaño de la ventana deslizante (sliding window) como 5 llamadas
# Es decir, el Circuit Breaker evaluará las últimas 5 llamadas para calcular la tasa de fallos
resilience4j.circuitbreaker.instances.order-service.sliding-window-size=5

# Establece que la ventana deslizante será basada en conteo de llamadas (no en tiempo)
# Otras opción sería "time_based" para usar una ventana de duración temporal
resilience4j.circuitbreaker.instances.order-service.sliding-window-type=count_based

# Umbral de tasa de fallos: si el 50% o más de las llamadas fallan en la ventana deslizante, el Circuit Breaker se abrirá
resilience4j.circuitbreaker.instances.order-service.failure-rate-threshold=50

# Tiempo que el Circuit Breaker permanece en estado "OPEN" antes de pasar automáticamente a "HALF_OPEN"
resilience4j.circuitbreaker.instances.order-service.wait-duration-in-open-state=10s

# Permite que el Circuit Breaker cambie automáticamente de "OPEN" a "HALF_OPEN" después del tiempo de espera
resilience4j.circuitbreaker.instances.order-service.automatic-transition-from-open-to-half-open-enabled=true

# Número de llamadas permitidas en estado "HALF_OPEN" para probar si el servicio se ha recuperado
# Si estas llamadas son exitosas, el Circuit Breaker volverá a "CLOSED"
resilience4j.circuitbreaker.instances.order-service.permitted-number-of-calls-in-half-open-state=3


#Kafka Configuration
# Configuración del consumidor de Kafka
spring.kafka.bootstrap-servers=localhost:9092
# Número de reintentos al enviar mensajes
spring.kafka.producer.retries=1
# Configuración del serializador de claves y valores para el productor de Kafka
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Serializador de valores para el productor de Kafka
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

